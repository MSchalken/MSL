package music_specification_language.structure;

/*Generated by MPS */

import jetbrains.mps.smodel.runtime.ConceptPresentationAspectBase;
import jetbrains.mps.smodel.runtime.ConceptPresentation;
import org.jetbrains.annotations.Nullable;
import org.jetbrains.mps.openapi.language.SAbstractConcept;
import jetbrains.mps.smodel.runtime.ConceptPresentationBuilder;

public class ConceptPresentationAspectImpl extends ConceptPresentationAspectBase {
  private ConceptPresentation props_ClipDefinition;
  private ConceptPresentation props_InstrumentDefinition;
  private ConceptPresentation props_MSLProgram;
  private ConceptPresentation props_SegmentDefinition;
  private ConceptPresentation props_clip_ref;

  @Override
  @Nullable
  public ConceptPresentation getDescriptor(SAbstractConcept c) {
    StructureAspectDescriptor structureDescriptor = (StructureAspectDescriptor) myLanguageRuntime.getAspect(jetbrains.mps.smodel.runtime.StructureAspectDescriptor.class);
    switch (structureDescriptor.internalIndex(c)) {
      case LanguageConceptSwitch.ClipDefinition:
        if (props_ClipDefinition == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.shortDesc("A clip containing a music pattern for a single instrument");
          cpb.presentationByName();
          props_ClipDefinition = cpb.create();
        }
        return props_ClipDefinition;
      case LanguageConceptSwitch.InstrumentDefinition:
        if (props_InstrumentDefinition == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.shortDesc("Declaration of a single instrument");
          cpb.presentationByName();
          props_InstrumentDefinition = cpb.create();
        }
        return props_InstrumentDefinition;
      case LanguageConceptSwitch.MSLProgram:
        if (props_MSLProgram == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.presentationByName();
          props_MSLProgram = cpb.create();
        }
        return props_MSLProgram;
      case LanguageConceptSwitch.SegmentDefinition:
        if (props_SegmentDefinition == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.shortDesc("A segment of the music piece");
          cpb.presentationByName();
          props_SegmentDefinition = cpb.create();
        }
        return props_SegmentDefinition;
      case LanguageConceptSwitch.clip_ref:
        if (props_clip_ref == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.presentationByReference(0xf9e4b29d3c894af7L, 0x8f5f5c06b22ba00bL, 0x552bfe4802320cecL, 0x552bfe4802320cf5L, "clip", "", "");
          props_clip_ref = cpb.create();
        }
        return props_clip_ref;
    }
    return null;
  }
}
